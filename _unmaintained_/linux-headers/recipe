pkg=linux-headers
ver=4.6.5
rel=1
sum=Header files and scripts for building modules for linux kernel
lic=GPL2
url=http://www.kernel.org
mkd=(bc kmod docbook-xsl inetutils elfutils xmlto)
opt=(!strip)
#src=(https://www.kernel.org/pub/linux/kernel/v4.x/linux-${ver:0:3}.tar.xz)
src=(https://www.kernel.org/pub/linux/kernel/v4.x/linux-$ver.tar.xz)
sha=(7e2d53c8a36a159c444be8f452eae898fadc1f1862fe470a36c836c3d1d613c5)

package() {
    install -dm755 ${pkgdir}/usr/lib/modules/${ver}

    install -D -m644 Makefile \
        ${pkgdir}/usr/lib/modules/${ver}/build/Makefile
    install -D -m644 kernel/Makefile \
        ${pkgdir}/usr/lib/modules/${ver}/build/kernel/Makefile
    install -D -m644 $rcsdir/config \
        ${pkgdir}/usr/lib/modules/${ver}/build/.config

##### remove this when merged into linux
    install -m644 $rcsdir/config .config
    make prepare
    make modules_prepare
#####

    mkdir -p ${pkgdir}/usr/lib/modules/${ver}/build/include

    for i in acpi asm-generic config crypto drm generated keys linux math-emu \
        media net pcmcia scsi soc sound trace uapi video xen; do
        cp -a include/${i} ${pkgdir}/usr/lib/modules/${ver}/build/include/
    done

    # copy arch includes for external modules
    mkdir -p ${pkgdir}/usr/lib/modules/${ver}/build/arch/x86
    cp -a arch/x86/include ${pkgdir}/usr/lib/modules/${ver}/build/arch/x86/

    # copy files necessary for later builds, like nvidia and vmware
##### uncomment this
    #cp Module.symvers ${pkgdir}/usr/lib/modules/${ver}/build
#####
    cp -a scripts ${pkgdir}/usr/lib/modules/${ver}/build

    # fix permissions on scripts dir
    chmod og-w -R ${pkgdir}/usr/lib/modules/${ver}/build/scripts
    mkdir -p ${pkgdir}/usr/lib/modules/${ver}/build/.tmp_versions

    mkdir -p ${pkgdir}/usr/lib/modules/${ver}/build/arch/x86/kernel

    cp arch/x86/Makefile ${pkgdir}/usr/lib/modules/${ver}/build/arch/x86/

    cp arch/x86/kernel/asm-offsets.s ${pkgdir}/usr/lib/modules/${ver}/build/arch/x86/kernel/

    # add docbook makefile
    install -D -m644 Documentation/DocBook/Makefile \
        ${pkgdir}/usr/lib/modules/${ver}/build/Documentation/DocBook/Makefile

    # add dm headers
    mkdir -p ${pkgdir}/usr/lib/modules/${ver}/build/drivers/md
    cp drivers/md/*.h ${pkgdir}/usr/lib/modules/${ver}/build/drivers/md

    # add inotify.h
    mkdir -p ${pkgdir}/usr/lib/modules/${ver}/build/include/linux
    cp include/linux/inotify.h ${pkgdir}/usr/lib/modules/${ver}/build/include/linux/

    # add wireless headers
    mkdir -p ${pkgdir}/usr/lib/modules/${ver}/build/net/mac80211/
    cp net/mac80211/*.h ${pkgdir}/usr/lib/modules/${ver}/build/net/mac80211/

    # add dvb headers for external modules
    mkdir -p ${pkgdir}/usr/lib/modules/${ver}/build/drivers/media/dvb-core
    cp drivers/media/dvb-core/*.h ${pkgdir}/usr/lib/modules/${ver}/build/drivers/media/dvb-core/
    mkdir -p ${pkgdir}/usr/lib/modules/${ver}/build/include/config/dvb/
    cp include/config/dvb/*.h ${pkgdir}/usr/lib/modules/${ver}/build/include/config/dvb/

    # add dvb headers for http://mcentral.de/hg/~mrec/em28xx-new
    mkdir -p ${pkgdir}/usr/lib/modules/${ver}/build/drivers/media/dvb-frontends/
    cp drivers/media/dvb-frontends/lgdt330x.h ${pkgdir}/usr/lib/modules/${ver}/build/drivers/media/dvb-frontends/
    mkdir -p ${pkgdir}/usr/lib/modules/${ver}/build/drivers/media/i2c/
    cp drivers/media/i2c/msp3400-driver.h ${pkgdir}/usr/lib/modules/${ver}/build/drivers/media/i2c/

    # add dvb headers
    mkdir -p ${pkgdir}/usr/lib/modules/${ver}/build/drivers/media/usb/dvb-usb
    cp drivers/media/usb/dvb-usb/*.h ${pkgdir}/usr/lib/modules/${ver}/build/drivers/media/usb/dvb-usb/
    mkdir -p ${pkgdir}/usr/lib/modules/${ver}/build/drivers/media/dvb-frontends
    cp drivers/media/dvb-frontends/*.h ${pkgdir}/usr/lib/modules/${ver}/build/drivers/media/dvb-frontends/
    mkdir -p ${pkgdir}/usr/lib/modules/${ver}/build/drivers/media/tuners
    cp drivers/media/tuners/*.h ${pkgdir}/usr/lib/modules/${ver}/build/drivers/media/tuners/

    # add xfs and shmem for aufs building
    mkdir -p ${pkgdir}/usr/lib/modules/${ver}/build/fs/xfs
    mkdir -p ${pkgdir}/usr/lib/modules/${ver}/build/mm
    # removed in 3.17 series
    # cp fs/xfs/xfs_sb.h ${pkgdir}/usr/lib/modules/${ver}/build/fs/xfs/xfs_sb.h

    # copy in Kconfig files
    for i in $(find . -name Kconfig*); do
        mkdir -p ${pkgdir}/usr/lib/modules/${ver}/build/`echo ${i} | sed 's|/Kconfig.*||'`
        cp ${i} ${pkgdir}/usr/lib/modules/${ver}/build/${i}
    done

    # add objtool for external module building and enabled VALIDATION_STACK option
    if [ -f tools/objtool/objtool ]; then
            mkdir -p ${pkgdir}/usr/lib/modules/${ver}/build/tools/objtool
            cp -a tools/objtool/objtool ${pkgdir}/usr/lib/modules/${ver}/build/tools/objtool/ 
    fi

    chown -R root.root ${pkgdir}/usr/lib/modules/${ver}/build
    find ${pkgdir}/usr/lib/modules/${ver}/build -type d -exec chmod 755 {} \;

    # strip scripts directory
    find ${pkgdir}/usr/lib/modules/${ver}/build/scripts -type f -perm -u+w 2>/dev/null | while read binary ; do
        case $(file -bi ${binary}) in
            *application/x-sharedlib*) # Libraries (.so)
                /usr/bin/strip --strip-unneeded ${binary};;
            *application/x-archive*) # Libraries (.a)
                /usr/bin/strip --strip-debug ${binary};;
            *application/x-executable*) # Binaries
                /usr/bin/strip --strip-all ${binary};;
        esac
    done

    # remove unneeded architectures
    rm -rf ${pkgdir}/usr/lib/modules/${ver}/build/arch/{alpha,arc,arm,arm26,arm64,avr32,blackfin,c6x,cris,frv,h8300,hexagon,ia64,m32r,m68k,m68knommu,metag,mips,microblaze,mn10300,openrisc,parisc,powerpc,ppc,s390,score,sh,sh64,sparc,sparc64,tile,unicore32,um,v850,xtensa}
}
