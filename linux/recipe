pkg=(linux linux-headers)
ver=4.9.40
rel=1
lic=GPL2
url=http://www.kernel.org
mkd=(bc)
src=(https://www.kernel.org/pub/linux/kernel/v4.x/linux-$ver.tar.xz)
sha=(025767f3652a656c7b5ed2949aef205f88a5acfd70ae3fe77710ad37f1662d9b)

build() {
    cp -v $rcsdir/config .config

    # don't run depmod on 'make install'.
    sed -i '2iexit 0' scripts/depmod.sh

    make prepare
    yes "" | make config >/dev/null

    make bzImage modules
}

package_linux() {
    sum="The Linux kernel and modules"
    grp=base
    dep=(coreutils kmod dracut)
    opt=(!strip)

    kver=$(make LOCALVERSION= kernelrelease)

    mkdir -p $pkgdir/{lib/modules,lib/firmware,boot}

    make INSTALL_MOD_PATH=$pkgdir modules_install

    # remove firmware folder, build and source links
    rm -f $pkgdir/lib/modules/$kver/{source,build}
    rm -rf $pkgdir/lib/firmware

    depmod -b $pkgdir -F System.map $kver

    mkdir $pkgdir/usr; mv $pkgdir/lib $pkgdir/usr/

    cp arch/x86/boot/bzImage $pkgdir/boot/vmlinuz

    install -D -m644 vmlinux $pkgdir/usr/lib/modules/$kver/build/vmlinux
}

package_linux-headers() {
    sum="Header files and scripts for building modules for linux kernel"
    opt=(!strip)

    kver=$(make LOCALVERSION= kernelrelease)

    install -dm755 $pkgdir/usr/lib/modules/$kver

    install -D -m644 Makefile \
        $pkgdir/usr/lib/modules/$kver/build/Makefile
    install -D -m644 kernel/Makefile \
        $pkgdir/usr/lib/modules/$kver/build/kernel/Makefile
    install -D -m644 $rcsdir/config \
        $pkgdir/usr/lib/modules/$kver/build/.config

    mkdir -p $pkgdir/usr/lib/modules/$kver/build/include

    for i in acpi asm-generic config crypto drm generated keys linux math-emu \
        media net pcmcia scsi soc sound trace uapi video xen; do
        cp -a include/${i} $pkgdir/usr/lib/modules/$kver/build/include/
    done

    # copy arch includes for external modules
    mkdir -p $pkgdir/usr/lib/modules/$kver/build/arch/x86
    cp -a arch/x86/include $pkgdir/usr/lib/modules/$kver/build/arch/x86/

    # copy files necessary for later builds, like nvidia and vmware
    cp Module.symvers $pkgdir/usr/lib/modules/$kver/build
    cp -a scripts $pkgdir/usr/lib/modules/$kver/build

    # fix permissions on scripts dir
    chmod og-w -R $pkgdir/usr/lib/modules/$kver/build/scripts
    mkdir -p $pkgdir/usr/lib/modules/$kver/build/.tmp_versions

    mkdir -p $pkgdir/usr/lib/modules/$kver/build/arch/x86/kernel

    cp arch/x86/Makefile $pkgdir/usr/lib/modules/$kver/build/arch/x86/

    cp arch/x86/kernel/asm-offsets.s $pkgdir/usr/lib/modules/$kver/build/arch/x86/kernel/

    # add docbook makefile
    install -D -m644 Documentation/DocBook/Makefile \
        $pkgdir/usr/lib/modules/$kver/build/Documentation/DocBook/Makefile

    # add dm headers
    mkdir -p $pkgdir/usr/lib/modules/$kver/build/drivers/md
    cp drivers/md/*.h $pkgdir/usr/lib/modules/$kver/build/drivers/md

    # add inotify.h
    mkdir -p $pkgdir/usr/lib/modules/$kver/build/include/linux
    cp include/linux/inotify.h $pkgdir/usr/lib/modules/$kver/build/include/linux/

    # add wireless headers
    mkdir -p $pkgdir/usr/lib/modules/$kver/build/net/mac80211/
    cp net/mac80211/*.h $pkgdir/usr/lib/modules/$kver/build/net/mac80211/

    # add dvb headers for external modules
    mkdir -p $pkgdir/usr/lib/modules/$kver/build/drivers/media/dvb-core
    cp drivers/media/dvb-core/*.h $pkgdir/usr/lib/modules/$kver/build/drivers/media/dvb-core/
    mkdir -p $pkgdir/usr/lib/modules/$kver/build/include/config/dvb/
    cp include/config/dvb/*.h $pkgdir/usr/lib/modules/$kver/build/include/config/dvb/

    # add dvb headers for http://mcentral.de/hg/~mrec/em28xx-new
    mkdir -p $pkgdir/usr/lib/modules/$kver/build/drivers/media/dvb-frontends/
    cp drivers/media/dvb-frontends/lgdt330x.h $pkgdir/usr/lib/modules/$kver/build/drivers/media/dvb-frontends/
    mkdir -p $pkgdir/usr/lib/modules/$kver/build/drivers/media/i2c/
    cp drivers/media/i2c/msp3400-driver.h $pkgdir/usr/lib/modules/$kver/build/drivers/media/i2c/

    # add dvb headers
    mkdir -p $pkgdir/usr/lib/modules/$kver/build/drivers/media/usb/dvb-usb
    cp drivers/media/usb/dvb-usb/*.h $pkgdir/usr/lib/modules/$kver/build/drivers/media/usb/dvb-usb/
    mkdir -p $pkgdir/usr/lib/modules/$kver/build/drivers/media/dvb-frontends
    cp drivers/media/dvb-frontends/*.h $pkgdir/usr/lib/modules/$kver/build/drivers/media/dvb-frontends/
    mkdir -p $pkgdir/usr/lib/modules/$kver/build/drivers/media/tuners
    cp drivers/media/tuners/*.h $pkgdir/usr/lib/modules/$kver/build/drivers/media/tuners/

    # add xfs and shmem for aufs building
    mkdir -p $pkgdir/usr/lib/modules/$kver/build/fs/xfs
    mkdir -p $pkgdir/usr/lib/modules/$kver/build/mm
    # removed in 3.17 series
    # cp fs/xfs/xfs_sb.h $pkgdir/usr/lib/modules/$kver/build/fs/xfs/xfs_sb.h

    # copy in Kconfig files
    for i in $(find . -name Kconfig*); do
        mkdir -p $pkgdir/usr/lib/modules/$kver/build/`echo ${i} | sed 's|/Kconfig.*||'`
        cp ${i} $pkgdir/usr/lib/modules/$kver/build/${i}
    done

    # add objtool for external module building and enabled VALIDATION_STACK option
    if [ -f tools/objtool/objtool ]; then
            mkdir -p $pkgdir/usr/lib/modules/$kver/build/tools/objtool
            cp -a tools/objtool/objtool $pkgdir/usr/lib/modules/$kver/build/tools/objtool/ 
    fi

    chown -R root.root $pkgdir/usr/lib/modules/$kver/build
    find $pkgdir/usr/lib/modules/$kver/build -type d -exec chmod 755 {} \;

    # strip scripts directory
    find $pkgdir/usr/lib/modules/$kver/build/scripts -type f -perm -u+w 2>/dev/null | while read binary ; do
        case $(file -bi ${binary}) in
            *application/x-sharedlib*) # Libraries (.so)
                /usr/bin/strip --strip-unneeded ${binary};;
            *application/x-archive*) # Libraries (.a)
                /usr/bin/strip --strip-debug ${binary};;
            *application/x-executable*) # Binaries
                /usr/bin/strip --strip-all ${binary};;
        esac
    done

    # remove unneeded architectures
    rm -rf $pkgdir/usr/lib/modules/$kver/build/arch/{alpha,arc,arm,arm26,arm64,avr32,blackfin,c6x,cris,frv,h8300,hexagon,ia64,m32r,m68k,m68knommu,metag,mips,microblaze,mn10300,openrisc,parisc,powerpc,ppc,s390,score,sh,sh64,sparc,sparc64,tile,unicore32,um,v850,xtensa}
}
