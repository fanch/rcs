From 9c397af0dabfff7177bcb76409af5b8f9ae608cf Mon Sep 17 00:00:00 2001
From: Drew DeVault <sir@cmpwn.com>
Date: Thu, 27 Apr 2017 17:19:58 -0400
Subject: [PATCH] --opengl-backend: support multiple backends

Will attempt each backend specified in order. The x11 backend is still
preferred, even on Wayland, but the user can now use
--opengl-backend=wayland,x11 to prefer wayland and fall back to x11 if
wayland is unavailable.
---
 video/out/opengl/context.c | 66 +++++++++++++++++++++++++++++++++++++++++-----
 video/out/opengl/context.h |  8 ++----
 video/out/vo_opengl.c      |  7 +++--
 3 files changed, 64 insertions(+), 17 deletions(-)

diff --git a/video/out/opengl/context.c b/video/out/opengl/context.c
index 72311e11fa..568bb662b8 100644
--- a/video/out/opengl/context.c
+++ b/video/out/opengl/context.c
@@ -89,6 +89,30 @@ static const struct mpgl_driver *const backends[] = {
 #endif
 };
 
+static bool get_desc(struct m_obj_desc *dst, int index)
+{
+    if (index >= MP_ARRAY_SIZE(backends) - 1)
+        return false;
+    const struct mpgl_driver *driver = backends[index];
+    *dst = (struct m_obj_desc) {
+        .name = driver->name,
+        .description = driver->name,
+        .priv_size = sizeof(struct mpgl_driver),
+        .p = driver,
+    };
+    return true;
+}
+
+// for backend option
+const struct m_obj_list mpgl_backend_list = {
+    .get_desc = get_desc,
+    .description = "OpenGL windowing backends",
+    .allow_unknown_entries = true,
+    .allow_disable_entries = true,
+    .allow_trailer = true,
+    .disallow_positional_parameters = true,
+};
+
 // 0-terminated list of desktop GL versions a backend should try to
 // initialize. The first entry is the most preferred version.
 const int mpgl_preferred_gl_versions[] = {
@@ -100,7 +124,7 @@ const int mpgl_preferred_gl_versions[] = {
     0
 };
 
-int mpgl_find_backend(const char *name)
+static int mpgl_find_backend(const char *name)
 {
     if (name == NULL || strcmp(name, "auto") == 0)
         return -1;
@@ -126,7 +150,7 @@ int mpgl_validate_backend_opt(struct mp_log *log, const struct m_option *opt,
     return mpgl_find_backend(s) >= -1 ? 1 : M_OPT_INVALID;
 }
 
-static void *get_native_display(void *pctx, const char *name)
+static void *get_native_display(const char *name)
 {
     MPGLContext *ctx = pctx;
     if (!ctx->native_display_type || !name)
@@ -186,11 +210,41 @@ static MPGLContext *init_backend(struct vo *vo, const struct mpgl_driver *driver
 
 // Create a VO window and create a GL context on it.
 //  vo_flags: passed to the backend's create window function
-MPGLContext *mpgl_init(struct vo *vo, const char *backend_name, int vo_flags)
+MPGLContext *mpgl_init(struct vo *vo, struct m_obj_settings *backend_list, int vo_flags)
 {
     MPGLContext *ctx = NULL;
-    int index = mpgl_find_backend(backend_name);
-    if (index == -1) {
+    if (backend_list && backend_list[0].name) {
+        int n;
+        for (n = 0; backend_list[n].name; n++) {
+            // Something like "--opengl-backend=name," allows fallback to autoprobing.
+            int index = mpgl_find_backend(backend_list[n].name);
+            if (index == -1 || strlen(backend_list[n].name) == 0)
+                goto autoprobe;
+            if (index == -2) {
+                MP_FATAL(vo, "Unknown opengl backend '%s'\n", backend_list[n].name);
+                exit(-2);
+                return NULL;
+            }
+            ctx = init_backend(vo, backends[index], true, vo_flags);
+            if (ctx)
+                break;
+        }
+        if (!ctx && !vo->probing) {
+            // Now try with probing off
+            for (n = 0; backend_list[n].name; n++) {
+                int index = mpgl_find_backend(backend_list[n].name);
+                ctx = init_backend(vo, backends[index], false, vo_flags);
+                if (ctx)
+                    break;
+            }
+            if (!ctx) {
+                // Backend explicitly requested, but unable to fulfill
+                return NULL;
+            }
+        }
+    }
+    if (!ctx) {
+autoprobe:
         for (int n = 0; n < MP_ARRAY_SIZE(backends); n++) {
             ctx = init_backend(vo, backends[n], true, vo_flags);
             if (ctx)
@@ -204,8 +258,6 @@ MPGLContext *mpgl_init(struct vo *vo, const char *backend_name, int vo_flags)
                     break;
             }
         }
-    } else if (index >= 0) {
-        ctx = init_backend(vo, backends[index], false, vo_flags);
     }
     return ctx;
 }
diff --git a/video/out/opengl/context.h b/video/out/opengl/context.h
index 229c5ef54f..7cf439c1a0 100644
--- a/video/out/opengl/context.h
+++ b/video/out/opengl/context.h
@@ -100,17 +100,13 @@ typedef struct MPGLContext {
     void *priv;
 } MPGLContext;
 
-MPGLContext *mpgl_init(struct vo *vo, const char *backend_name, int vo_flags);
+MPGLContext *mpgl_init(struct vo *vo, struct m_obj_settings *backend_list, int vo_flags);
 void mpgl_uninit(MPGLContext *ctx);
 int mpgl_reconfig_window(struct MPGLContext *ctx);
 int mpgl_control(struct MPGLContext *ctx, int *events, int request, void *arg);
 void mpgl_start_frame(struct MPGLContext *ctx);
 void mpgl_swap_buffers(struct MPGLContext *ctx);
 
-int mpgl_find_backend(const char *name);
-
-struct m_option;
-int mpgl_validate_backend_opt(struct mp_log *log, const struct m_option *opt,
-                              struct bstr name, struct bstr param);
+extern const struct m_obj_list mpgl_backend_list;
 
 #endif
diff --git a/video/out/vo_opengl.c b/video/out/vo_opengl.c
index 9b3f944e21..91e55b3b2f 100644
--- a/video/out/vo_opengl.c
+++ b/video/out/vo_opengl.c
@@ -55,7 +55,7 @@ struct vo_opengl_opts {
     int allow_sw;
     int swap_interval;
     int vsync_fences;
-    char *backend;
+    struct m_obj_settings *backend_list;
     int es;
     int pattern[2];
 };
@@ -383,7 +383,7 @@ static int preinit(struct vo *vo)
     if (p->opts.allow_sw)
         vo_flags |= VOFLAG_SW;
 
-    p->glctx = mpgl_init(vo, p->opts.backend, vo_flags);
+    p->glctx = mpgl_init(vo, p->opts.backend_list, vo_flags);
     if (!p->glctx)
         goto err_out;
     p->gl = p->glctx->gl;
@@ -438,8 +438,7 @@ const struct vo_driver video_out_opengl = {
         OPT_FLAG("opengl-waitvsync", opts.waitvsync, 0),
         OPT_INT("opengl-swapinterval", opts.swap_interval, 0),
         OPT_FLAG("opengl-debug", opts.use_gl_debug, 0),
-        OPT_STRING_VALIDATE("opengl-backend", opts.backend, 0,
-                            mpgl_validate_backend_opt),
+        OPT_SETTINGSLIST("opengl-backend", opts.backend_list, 0, &mpgl_backend_list ),
         OPT_FLAG("opengl-sw", opts.allow_sw, 0),
         OPT_CHOICE("opengl-es", opts.es, 0, ({"no", -1}, {"auto", 0},
                                              {"yes", 1}, {"force2", 2})),
